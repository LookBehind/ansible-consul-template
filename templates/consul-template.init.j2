#! /bin/sh
### BEGIN INIT INFO
# Provides:          consul-template
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Consul Template Service Discovery Platform
# Description:       Consul Template convenient way to populate values from
#                    Consul into the filesystem using the consul-template daemon.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME=consul-template

DAEMON={{ consul_template_bin_dir }}/consul-template
PIDFILE=/opt/consul-template/consul-template.pid

SCRIPTNAME=/etc/init.d/$NAME
CONSUL_TEMPLATE_OPTIONS="-config {{ consul_template_conf_dir }}"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Define LSB log_* functions.
. /lib/lsb/init-functions

do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   other if daemon could not be started or a failure occured
        start-stop-daemon --start -b --quiet --pidfile $PIDFILE -c {{ consul_template_user }} --exec $DAEMON -- $CONSUL_TEMPLATE_OPTIONS
}

do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   other if daemon could not be stopped or a failure occurred
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE -c {{ consul_template_user }} --exec $DAEMON
}


case "$1" in
  start)
        log_daemon_msg "Starting $NAME"
        do_start
        case "$?" in
                0) log_end_msg 0 ;;
                1) log_progress_msg "already started"
                   log_end_msg 0 ;;
                *) log_end_msg 1 ;;
        esac

        ;;
  stop)
        log_daemon_msg "Stopping $NAME"
        do_stop
        case "$?" in
                0) log_end_msg 0 ;;
                1) log_progress_msg "already stopped"
                   log_end_msg 0 ;;
                *) log_end_msg 1 ;;
        esac

        ;;
  restart)
        $0 stop
        $0 start
        ;;
  status)
        status_of_proc -p $PIDFILE $DAEMON $NAME && exit 0 || exit $?
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|status}" >&2
        exit 3
        ;;
esac

:
